Colt Matrix benchmark running on

java.vm.vendor  ?                                        
java.vm.version ?                                        
java.vm.name    ?                                        
os.name         Linux                                    
os.version      #1 Mon Sep 27 10:40:35 EDT 1999.2.2.12-20
os.arch         i686                                     
java.version    1.1.8                                    
java.vendor     IBM Corporation                          
java.vendor.url http://www.ibm.com/                      


@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix2D assign [Mops/sec]
type=dense
       | density
       | 0.0010  0.01    0.1     0.999  
----------------------------------------
s 30   | 202.717 153.534 173.376 184.647
i 33   |  98.813  92.027  94.22   83.302
z 66   |  41.771  41.762  41.837  41.962
e 100  |  42.172  42.22   42.356  41.648
  300  |  19.299  19.433  18.965  19.279
  1000 |  19.756  19.185  19.013  19    

Performance of DoubleMatrix2D assign [Mops/sec]
type=sparse
       | density
       | 0.0010       0.01    0.1     0.999  
---------------------------------------------
s 30   |  90.17        62.385  21.478   3.495
i 33   | 108.349       75.37   27.035   2.289
z 66   | 384.744      169.401  31.19    2.746
e 100  | 726.676      242.37  NaN     NaN    
  300  |   2.219E+003 349.705 NaN     NaN    
  1000 |   2.101E+003 313.301 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 2.248  2.461   8.072  52.829
i 33   | 0.912  1.221   3.485  36.386
z 66   | 0.109  0.247   1.341  15.282
e 100  | 0.058  0.174 NaN     NaN    
  300  | 0.009  0.056 NaN     NaN    
  1000 | 0.009  0.061 NaN     NaN    
Run took a total of Time=456.004 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=dense
       | density
       | 0.0010 0.01   0.1    0.999 
------------------------------------
s 30   | 10.568 10.641 10.593 10.595
i 33   | 10.346 10.328 10.411 10.314
z 66   | 10.353 10.46  10.431 10.441
e 100  | 10.324 10.304 10.336 10.292
  300  |  7.264  7.388  7.556  7.488
  1000 |  7.469  7.382  7.322  7.357

Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 1.553  1.445   1.229   0.67 
i 33   | 1.547  1.454   1.263   0.525
z 66   | 1.446  1.453   1.263   0.585
e 100  | 1.489  1.455 NaN     NaN    
  300  | 1.483  1.434 NaN     NaN    
  1000 | 1.472  1.425 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 6.804  7.365   8.618  15.817
i 33   | 6.687  7.1     8.242  19.629
z 66   | 7.162  7.199   8.259  17.85 
e 100  | 6.931  7.084 NaN     NaN    
  300  | 4.898  5.151 NaN     NaN    
  1000 | 5.072  5.182 NaN     NaN    
Run took a total of Time=414.626 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=dense
       | density
       | 0.0010 0.01  0.1   0.999
---------------------------------
s 30   | 6.746  6.64  6.699 6.847
i 33   | 6.531  6.577 6.603 6.585
z 66   | 6.196  6.522 6.531 6.561
e 100  | 6.504  6.507 6.485 5.879
  300  | 5.242  5.015 4.998 4.978
  1000 | 5.074  4.836 4.821 4.838

Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 1.392  1.313   1.126   0.631
i 33   | 1.382  1.305   1.138   0.503
z 66   | 1.323  1.294   1.153   0.554
e 100  | 1.333  1.304 NaN     NaN    
  300  | 1.309  1.295 NaN     NaN    
  1000 | 1.326  1.284 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 4.847  5.057   5.951  10.847
i 33   | 4.725  5.041   5.801  13.102
z 66   | 4.683  5.039   5.665  11.846
e 100  | 4.879  4.99  NaN     NaN    
  300  | 4.006  3.871 NaN     NaN    
  1000 | 3.828  3.766 NaN     NaN    
Run took a total of Time=408.428 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=dense
       | density
       | 0.0010       0.01    0.1    0.999 
-------------------------------------------
s 30   |  98.881       98.287 98.709 97.516
i 33   | 160.007      115.289 66.786 66.492
z 66   | 354.733      194.525 70.956 70.511
e 100  | 572.834      256.28  80.372 80.499
  300  |   1.163E+003 391.62  39.72  40.832
  1000 |   2.334E+003 409.794 38.098 38.136

Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=sparse
       | density
       | 0.0010  0.01    0.1     0.999  
----------------------------------------
s 30   |   2.886   2.74    2.664   2.918
i 33   |  26.198   7.754   2.69    2.9  
z 66   |  66.685  13.284   2.629   2.989
e 100  |  96.516  21.726 NaN     NaN    
  300  | 254.417  60.629 NaN     NaN    
  1000 | 590.058 110.73  NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   | 34.263 35.865  37.059  33.415
i 33   |  6.108 14.869  24.825  22.928
z 66   |  5.319 14.644  26.988  23.587
e 100  |  5.935 11.796 NaN     NaN    
  300  |  4.57   6.459 NaN     NaN    
  1000 |  3.955  3.701 NaN     NaN    
Run took a total of Time=480.366 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=dense
       | density
       | 0.0010 0.01   0.1    0.999 
------------------------------------
s 30   | 32.872 33.542 30.249 31.479
i 33   | 28.883 28.955 30.614 32.409
z 66   | 33.719 33.596 28.864 28.647
e 100  | 34.309 15.042 31.192 23.819
  300  | 11.471 12.285 12.778 12.17 
  1000 | 11.316 12.548 12.556 12.564

Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 0.97   0.969   0.959   0.923
i 33   | 0.97   0.957   0.939   0.94 
z 66   | 0.953  0.96    0.93    0.905
e 100  | 0.955  0.954 NaN     NaN    
  300  | 0.963  0.93  NaN     NaN    
  1000 | 0.97   0.934 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   | 33.888 34.607  31.543  34.108
i 33   | 29.784 30.248  32.595  34.486
z 66   | 35.379 34.988  31.027  31.655
e 100  | 35.909 15.763 NaN     NaN    
  300  | 11.915 13.203 NaN     NaN    
  1000 | 11.662 13.434 NaN     NaN    
Run took a total of Time=435.369 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of LUQuick.decompose [Mflops/sec]
type=dense
       | density
       | 0.0010       0.01    0.1    0.999 
-------------------------------------------
s 30   |  47.347       44.246 27.743 29.804
i 33   |  52.492       47.662 29.728 32.303
z 66   | 115.045      103.169 46.469 46.186
e 100  | 173.61       148.554 59.58  53.518
  300  | 436.16       284.92  79.678 64.8  
  1000 |   1.088E+003 444.296 49.603 36.64 

Performance of LUQuick.decompose [Mflops/sec]
type=sparse
       | density
       | 0.0010  0.01   0.1     0.999  
---------------------------------------
s 30   |   8.192  6.852   2.163   0.631
i 33   |   8.874  7.488   1.964   1.021
z 66   |  18.245 13.991   2.491   0.485
e 100  |  26.055 19.432 NaN     NaN    
  300  |  72.595 40.609 NaN     NaN    
  1000 | 193.489 55.849 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 5.78   6.457  12.824  47.266
i 33   | 5.915  6.365  15.134  31.632
z 66   | 6.306  7.374  18.654  95.149
e 100  | 6.663  7.645 NaN     NaN    
  300  | 6.008  7.016 NaN     NaN    
  1000 | 5.625  7.955 NaN     NaN    
Run took a total of Time=405.341 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of LUQuick.solve [Mflops/sec]
type=dense
       | density
       | 0.0010       0.01         0.1     0.999 
-------------------------------------------------
s 30   | 163.602      160.545      118.415 60.703
i 33   | 183.644      171.665      133.95  63.351
z 66   | 390.497      385.474      104.919 59.314
e 100  | 602.888      572.391       91.152 58.984
  300  |   1.414E+003   1.021E+003  43.214 37.514
  1000 |   4.173E+003  95.584       27.1   26.42 

Performance of LUQuick.solve [Mflops/sec]
type=sparse
       | density
       | 0.0010  0.01   0.1     0.999  
---------------------------------------
s 30   |  29.442 28.247   6.491   2.454
i 33   |  32.493 31.325   6.419   2.44 
z 66   |  65.155 59.621   4.121   2.485
e 100  |  98.301 88.317 NaN     NaN    
  300  | 290.192 56.379 NaN     NaN    
  1000 | 953.788  8.095 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   | 5.557   5.684  18.243  24.731
i 33   | 5.652   5.48   20.868  25.959
z 66   | 5.993   6.465  25.459  23.865
e 100  | 6.133   6.481 NaN     NaN    
  300  | 4.872  18.103 NaN     NaN    
  1000 | 4.375  11.808 NaN     NaN    
Run took a total of Time=820.9 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of SOR [Mflops/sec]
type=dense
       | density
       | 0.0010 0.01   0.1    0.999 
------------------------------------
s 30   | 48.783 48.821 49.564 50.123
i 33   | 49.667 49.708 47.578 47.156
z 66   | 47.419 47.552 47.489 47.515
e 100  | 46.315 46.509 43.907 46.581
  300  | 32.033 31.594 31.748 33.434
  1000 | 29.318 29.433 28.839 30.675

Performance of SOR [Mflops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 2.799  2.577   0.392   0.479
i 33   | 3.17   3.169   0.238  -0.404
z 66   | 2.561  2.469   2.504  -0.39 
e 100  | 2.965  2.599 NaN     NaN    
  300  | 2.551  1.887 NaN     NaN    
  1000 | 2.34   1.765 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999   
---------------------------------------
s 30   | 17.428 18.944 126.521  104.558
i 33   | 15.67  15.687 199.875 -116.737
z 66   | 18.518 19.262  18.966 -121.748
e 100  | 15.621 17.893 NaN      NaN    
  300  | 12.559 16.746 NaN      NaN    
  1000 | 12.529 16.672 NaN      NaN    
Run took a total of Time=526.636 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of Correlation [Mflops/sec]
type=dense
       | density
       | 0.0010 0.01   0.1    0.999 
------------------------------------
s 30   |  7.616  5.48   7.146  9.215
i 33   |  5.066  1.638 12.988 12.338
z 66   |  3.169 20.329 19.492 47.602
e 100  |  8.249 16.061 16.662 17.166
  300  | 27.918 44.257 44.345 43.717
  1000 | 35.083 37.06  34.811 36.058

Performance of Correlation [Mflops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 2.846  2.716   2.202   2.005
i 33   | 1.723  1.869   2.747   2.637
z 66   | 2.721  2.935   2.825   3.032
e 100  | 2.976  2.945 NaN     NaN    
  300  | 3.019  2.905 NaN     NaN    
  1000 | 3.104  2.891 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   |  2.677  2.017   3.245   4.595
i 33   |  2.94   0.877   4.729   4.679
z 66   |  1.165  6.927   6.901  15.698
e 100  |  2.771  5.453 NaN     NaN    
  300  |  9.247 15.233 NaN     NaN    
  1000 | 11.303 12.818 NaN     NaN    
Run took a total of Time=1153.666 secs. End of run.

Program execution took a total of 85.08745 minutes.
Good bye.
