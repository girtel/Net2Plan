Colt Matrix benchmark running on

java.vm.vendor  Sun Microsystems Inc.
java.vm.version 1.2.2                
java.vm.name    Classic VM           
os.name         Linux                
os.version      2.2.12-20            
os.arch         i386                 
java.version    1.2.2                
java.vendor     Sun Microsystems Inc.
java.vendor.url http://java.sun.com/ 


@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix2D assign [Mops/sec]
type=dense
       | density
       | 0.0010  0.01    0.1     0.999  
----------------------------------------
s 30   | 102.749 124.465 109.767 160.661
i 33   |  64.221  74.233  80.484  65.918
z 66   |  42.184  41.584  41.612  42.314
e 100  |  42.579  41.174  42.237  42.714
  300  |  19.77   19.197  18.015  19.695
  1000 |  19.324  19.286  19.342  19.324

Performance of DoubleMatrix2D assign [Mops/sec]
type=sparse
       | density
       | 0.0010       0.01    0.1     0.999  
---------------------------------------------
s 30   |  94.672       51.894  16.154   2.853
i 33   | 156.926       62.186  19.131   1.888
z 66   | 294.458      124.59   24.512   2.383
e 100  | 572.473      177.689 NaN     NaN    
  300  |   1.593E+003 284.898 NaN     NaN    
  1000 |   1.781E+003 278.754 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 1.085  2.398   6.795  56.32 
i 33   | 0.409  1.194   4.207  34.908
z 66   | 0.143  0.334   1.698  17.756
e 100  | 0.074  0.232 NaN     NaN    
  300  | 0.012  0.067 NaN     NaN    
  1000 | 0.011  0.069 NaN     NaN    
Run took a total of Time=189.305 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=dense
       | density
       | 0.0010 0.01  0.1   0.999
---------------------------------
s 30   | 7.309  7.333 7.388 7.296
i 33   | 7.318  7.102 7.229 7.144
z 66   | 7.31   7.299 7.269 7.287
e 100  | 7.179  7.204 6.903 7.188
  300  | 5.656  5.601 5.412 5.622
  1000 | 5.223  5.291 5.288 5.282

Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 1.237  1.171   0.933   0.502
i 33   | 1.244  1.161   0.947   0.413
z 66   | 1.182  1.164   1.016   0.457
e 100  | 1.191  1.153 NaN     NaN    
  300  | 1.169  1.144 NaN     NaN    
  1000 | 1.183  1.145 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 5.91   6.261   7.918  14.543
i 33   | 5.881  6.116   7.636  17.307
z 66   | 6.186  6.269   7.154  15.929
e 100  | 6.026  6.248 NaN     NaN    
  300  | 4.839  4.895 NaN     NaN    
  1000 | 4.414  4.623 NaN     NaN    
Run took a total of Time=170.663 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=dense
       | density
       | 0.0010 0.01  0.1   0.999
---------------------------------
s 30   | 4.269  4.222 3.883 4.219
i 33   | 4.167  4.223 4.213 4.214
z 66   | 4.209  4.19  4.229 4.199
e 100  | 4.12   4.169 4.196 4.196
  300  | 3.531  3.543 3.481 3.558
  1000 | 3.513  3.519 3.536 3.531

Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 1.067  1.045   0.847   0.495
i 33   | 1.1    1       0.922   0.397
z 66   | 1.05   1.036   0.895   0.437
e 100  | 1.053  1.043 NaN     NaN    
  300  | 1.064  1.026 NaN     NaN    
  1000 | 1.055  1.028 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 4.001  4.041   4.588   8.525
i 33   | 3.786  4.221   4.572  10.624
z 66   | 4.01   4.046   4.724   9.617
e 100  | 3.911  3.995 NaN     NaN    
  300  | 3.32   3.454 NaN     NaN    
  1000 | 3.329  3.422 NaN     NaN    
Run took a total of Time=168.134 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=dense
       | density
       | 0.0010       0.01    0.1    0.999 
-------------------------------------------
s 30   |  36.484       31.726 36.507 31.373
i 33   | 105.346       48.501 19.578 18.32 
z 66   | 229.429       83.016 20.72  20.79 
e 100  | 384.734      125.189 22.352 21.923
  300  | 881.517      232.759 17.845 17.045
  1000 |   1.718E+003 272.591 17.393 17.399

Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=sparse
       | density
       | 0.0010  0.01   0.1     0.999  
---------------------------------------
s 30   |   2.321  2.237   2.276   2.297
i 33   |  20.705  6.371   2.126   2.221
z 66   |  54.022 10.558   2.075   2.285
e 100  |  77.419 17.613 NaN     NaN    
  300  | 203.103 48.214 NaN     NaN    
  1000 | 475.059 87.87  NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   | 15.72  14.186  16.039  13.657
i 33   |  5.088  7.612   9.207   8.247
z 66   |  4.247  7.863   9.986   9.098
e 100  |  4.969  7.108 NaN     NaN    
  300  |  4.34   4.828 NaN     NaN    
  1000 |  3.617  3.102 NaN     NaN    
Run took a total of Time=404.788 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=dense
       | density
       | 0.0010 0.01   0.1    0.999 
------------------------------------
s 30   | 11.877 11.8   11.524 12.413
i 33   | 11.523 11.804 11.999 12.521
z 66   | 12.202 12.193 12.121 12.747
e 100  | 12.107 12.085 11.212 12.316
  300  |  6.61   6.509  6.619  8.222
  1000 |  7.979  7.984  7.995  7.989

Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 0.718  0.724   0.709   0.677
i 33   | 0.714  0.709   0.719   0.678
z 66   | 0.715  0.715   0.715   0.675
e 100  | 0.726  0.715 NaN     NaN    
  300  | 0.726  0.699 NaN     NaN    
  1000 | 0.731  0.702 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   | 16.534 16.301  16.243  18.341
i 33   | 16.143 16.657  16.682  18.477
z 66   | 17.064 17.044  16.954  18.888
e 100  | 16.675 16.902 NaN     NaN    
  300  |  9.103  9.307 NaN     NaN    
  1000 | 10.919 11.365 NaN     NaN    
Run took a total of Time=169.029 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of LUQuick.decompose [Mflops/sec]
type=dense
       | density
       | 0.0010  0.01    0.1    0.999 
--------------------------------------
s 30   |  28.057  25.749 13.771 12.179
i 33   |  30.638  25.111 14.328 12.755
z 66   |  68.665  61.011 20.962 18.411
e 100  | 105.87   90.147 28.986 21.527
  300  | 273.013 197.183 37.516 25.046
  1000 | 733.945 335.008 29.718 19.887

Performance of LUQuick.decompose [Mflops/sec]
type=sparse
       | density
       | 0.0010  0.01   0.1     0.999  
---------------------------------------
s 30   |   6.46   5.413   1.522   0.385
i 33   |   7.008  5.923   1.423   0.746
z 66   |  14.604 11.1     1.944   0.278
e 100  |  20.71  15.428 NaN     NaN    
  300  |  57.666 32.476 NaN     NaN    
  1000 | 155.545 43.349 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 4.343  4.757   9.046  31.658
i 33   | 4.372  4.239  10.067  17.101
z 66   | 4.702  5.497  10.78   66.207
e 100  | 5.112  5.843 NaN     NaN    
  300  | 4.734  6.072 NaN     NaN    
  1000 | 4.719  7.728 NaN     NaN    
Run took a total of Time=223.548 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of LUQuick.solve [Mflops/sec]
type=dense
       | density
       | 0.0010       0.01    0.1    0.999 
-------------------------------------------
s 30   | 108.371      112.137 57.753 22.017
i 33   | 109.337      128.1   61.339 22.871
z 66   | 240.103      290.444 45.126 26.001
e 100  | 451.21       442.507 42.484 27.325
  300  |   1.192E+003 701.814 26.65  23.639
  1000 |   3.642E+003  70.928 20.353 19.35 

Performance of LUQuick.solve [Mflops/sec]
type=sparse
       | density
       | 0.0010  0.01   0.1     0.999  
---------------------------------------
s 30   |  23.189 22.628   5.084   1.885
i 33   |  25.612 25.129   4.798   1.873
z 66   |  52.059 47.359   3.124   1.879
e 100  |  78.662 69.765 NaN     NaN    
  300  | 231.319 42.229 NaN     NaN    
  1000 | 764.122  6.4   NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   | 4.673   4.956  11.36   11.678
i 33   | 4.269   5.098  12.784  12.212
z 66   | 4.612   6.133  14.443  13.834
e 100  | 5.736   6.343 NaN     NaN    
  300  | 5.153  16.619 NaN     NaN    
  1000 | 4.766  11.083 NaN     NaN    
Run took a total of Time=787.035 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of SOR [Mflops/sec]
type=dense
       | density
       | 0.0010 0.01   0.1    0.999 
------------------------------------
s 30   | 15.618 15.242 15.773 15.59 
i 33   | 15.27  15.601 15.406 15.278
z 66   | 14.605 14.769 14.751 14.769
e 100  | 14.334 14.655 14.422 14.461
  300  | 12.544 12.572 12.434 12.585
  1000 | 12.152 12.17  12.085 11.982

Performance of SOR [Mflops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 2.488  2.505   2.157   2.562
i 33   | 2.467  2.427   2.155   2.53 
z 66   | 2.324  2.314   2.019   2.282
e 100  | 2.286  2.24  NaN     NaN    
  300  | 2.232  2.125 NaN     NaN    
  1000 | 2.203  2.03  NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 6.277  6.086   7.312   6.086
i 33   | 6.191  6.427   7.148   6.038
z 66   | 6.285  6.382   7.307   6.471
e 100  | 6.27   6.543 NaN     NaN    
  300  | 5.619  5.916 NaN     NaN    
  1000 | 5.517  5.994 NaN     NaN    
Run took a total of Time=162.647 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of Correlation [Mflops/sec]
type=dense
       | density
       | 0.0010 0.01   0.1    0.999 
------------------------------------
s 30   | 13.642 14.034 13.81  13.249
i 33   | 14.87  14.592 13.938 14.54 
z 66   | 19.74  19.38  18.802 19.593
e 100  | 22.634 20.671 21.913 21.881
  300  | 22.361 20.538 21.909 21.5  
  1000 | 19.28  19.275 19.267 19.253

Performance of Correlation [Mflops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 2.129  2.04    2.08    2.139
i 33   | 2.158  2.108   2.052   2.148
z 66   | 2.232  2.223   2.14    2.255
e 100  | 2.268  2.238 NaN     NaN    
  300  | 2.314  2.212 NaN     NaN    
  1000 | 2.361  2.253 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 6.407  6.88    6.639   6.195
i 33   | 6.889  6.921   6.793   6.77 
z 66   | 8.844  8.719   8.787   8.69 
e 100  | 9.982  9.234 NaN     NaN    
  300  | 9.663  9.287 NaN     NaN    
  1000 | 8.166  8.554 NaN     NaN    
Run took a total of Time=1226.006 secs. End of run.

Program execution took a total of 58.35815 minutes.
Good bye.
