Colt Matrix benchmark running on 

java.vm.vendor  Sun Microsystems Inc.
java.vm.version 1.2.2
java.vm.name    Classic VM
os.name         Windows NT
os.version      4.0
os.arch         x86
java.version    1.2.2
java.vendor     Sun Microsystems Inc.
java.vendor.url http://java.sun.com/

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix2D assign [Mops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 10.324  9.944 10.913  9.447
i 33  | 11.175 10.462 10.077 10.264
z 66  |  6.798  5.336  6.687  6.181
e 100 |  6.843  6.193  6.264  6.403
  300 |  5.855  5.949  5.83   5.997

Performance of DoubleMatrix2D assign [Mops/sec]
type=sparse
      | density
      | 0.0010  0.01   0.1   0.99 
----------------------------------
s 30  |  40.572 25.085 6.641 0.912
i 33  |  83.837 26.923 7.798 0.597
z 66  | 244.58  53.983 7.461 0.738
e 100 | 248.195 73.074 4.99  0.789
  300 | 618.531 95.736 7.29  0.438

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1   0.99  
---------------------------------
s 30  | 0.254  0.396 1.643 10.362
i 33  | 0.133  0.389 1.292 17.196
z 66  | 0.028  0.099 0.896  8.371
e 100 | 0.028  0.085 1.255  8.113
  300 | 0.009  0.062 0.8   13.68 
Run took a total of Time=241.948 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=dense
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 2.122  2.169 2.141 2.062
i 33  | 2.03   2.099 2.224 2.236
z 66  | 2.002  2.043 1.944 1.991
e 100 | 1.943  1.917 1.936 1.986
  300 | 1.973  2.014 1.919 1.899

Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.465  0.444 0.386 0.183
i 33  | 0.458  0.438 0.384 0.155
z 66  | 0.453  0.444 0.393 0.171
e 100 | 0.455  0.442 0.369 0.196
  300 | 0.451  0.434 0.385 0.143

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1   0.99  
---------------------------------
s 30  | 4.562  4.885 5.548 11.279
i 33  | 4.429  4.793 5.795 14.381
z 66  | 4.422  4.603 4.952 11.63 
e 100 | 4.27   4.336 5.239 10.156
  300 | 4.37   4.636 4.981 13.307
Run took a total of Time=174.24 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=dense
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 1.353  1.376 1.363 1.359
i 33  | 1.381  1.317 1.365 1.328
z 66  | 1.316  1.318 1.322 1.34 
e 100 | 1.309  1.321 1.305 1.364
  300 | 1.304  1.284 1.284 1.322

Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.417  0.398 0.35  0.174
i 33  | 0.418  0.397 0.355 0.142
z 66  | 0.4    0.396 0.312 0.178
e 100 | 0.402  0.322 0.336 0.172
  300 | 0.4    0.385 0.341 0.138

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 3.242  3.458 3.889 7.821
i 33  | 3.304  3.321 3.84  9.339
z 66  | 3.288  3.329 4.242 7.517
e 100 | 3.259  4.104 3.881 7.914
  300 | 3.256  3.333 3.768 9.597
Run took a total of Time=167.661 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=dense
      | density
      | 0.0010  0.01    0.1    0.99  
-------------------------------------
s 30  |  19.703  19.743 19.911 19.673
i 33  |  52.734  32.737 13.624 12.881
z 66  | 178.328  58.46  13.509 11.879
e 100 | 236.193 105.954 14.402 14.265
  300 | 390.738 153.337 14.536 14.536

Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=sparse
      | density
      | 0.0010  0.01   0.1   0.99 
----------------------------------
s 30  |   0.985  0.939 0.877 0.86 
i 33  |  10.956  2.993 0.955 0.897
z 66  |  30.412 10.002 0.969 0.922
e 100 |  47.294 31.793 0.969 0.938
  300 | 124.252 53.395 0.895 0.94 

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 19.997 21.028 22.698 22.874
i 33  |  4.813 10.937 14.273 14.358
z 66  |  5.864  5.845 13.944 12.881
e 100 |  4.994  3.333 14.856 15.214
  300 |  3.145  2.872 16.244 15.462
Run took a total of Time=262.047 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 8.005  7.395 6.643 6.171
i 33  | 5.655  6.642 6.112 5.618
z 66  | 5.191  5.867 5.073 5.286
e 100 | 4.724  5.944 4.966 4.667
  300 | 4.25   4.359 4.705 4.538

Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.304  0.324 0.291 0.289
i 33  | 0.314  0.308 0.315 0.274
z 66  | 0.319  0.302 0.313 0.305
e 100 | 0.299  0.306 0.29  0.292
  300 | 0.308  0.294 0.3   0.274

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 26.325 22.833 22.794 21.387
i 33  | 18.016 21.575 19.395 20.467
z 66  | 16.284 19.453 16.21  17.328
e 100 | 15.817 19.419 17.135 15.988
  300 | 13.781 14.828 15.706 16.588
Run took a total of Time=221.979 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of LUQuick.decompose [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 12.794  8.351  6.874  6.206
i 33  | 13.448  8.998  7.154  6.861
z 66  | 27.828 26.846  9.663  9.466
e 100 | 40.65  36.748 12.247 10.86 
  300 | 81.338 55.166 17.366 12.312

Performance of LUQuick.decompose [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01   0.1   0.99 
---------------------------------
s 30  |  2.819  2.272 0.814 0.334
i 33  |  3.099  2.511 0.772 0.445
z 66  |  6.412  4.669 0.848 0.337
e 100 |  8.67   6.591 1.168 0.219
  300 | 24.075 14.32  1.405 0.121

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1    0.99   
-----------------------------------
s 30  | 4.538  3.675  8.441  18.558
i 33  | 4.339  3.584  9.262  15.415
z 66  | 4.34   5.75  11.388  28.078
e 100 | 4.689  5.576 10.485  49.603
  300 | 3.379  3.852 12.357 101.411
Run took a total of Time=303.376 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of LUQuick.solve [Mflops/sec]
type=dense
      | density
      | 0.0010  0.01    0.1    0.99  
-------------------------------------
s 30  |  52.247  45.912 25.297 10.579
i 33  |  54.615  50.276 26.813 11.33 
z 66  | 116.219 110.52  18.547 11.242
e 100 | 170.823 176.341 17.208 11.155
  300 | 465.953 224.399 14.463 12.239

Performance of LUQuick.solve [Mflops/sec]
type=sparse
      | density
      | 0.0010  0.01   0.1   0.99 
----------------------------------
s 30  |  10.093 10.176 2.229 0.796
i 33  |  11.039 11.225 2.065 0.8  
z 66  |  22.166 22.872 1.375 0.751
e 100 |  35.902 31.849 1.285 0.764
  300 | 103.053 16.053 0.893 0.792

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 5.177   4.512 11.35  13.294
i 33  | 4.947   4.479 12.984 14.157
z 66  | 5.243   4.832 13.492 14.978
e 100 | 4.758   5.537 13.391 14.595
  300 | 4.522  13.978 16.2   15.452
Run took a total of Time=315.123 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of SOR [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 11.881 12.059 11.193 11.724
i 33  | 12.467 11.269 10.788 11.907
z 66  | 10.782 10.452 10.71  10.438
e 100 | 10.112 10.527  9.873 10.072
  300 |  9.757 10.379  9.616  9.757

Performance of SOR [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 1.073  1.045 0.815 1.047
i 33  | 1.109  1.004 0.944 0.986
z 66  | 1.026  0.947 0.82  0.928
e 100 | 0.97   0.929 0.823 0.931
  300 | 0.963  0.873 0.722 0.884

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 11.075 11.544 13.731 11.199
i 33  | 11.238 11.226 11.434 12.072
z 66  | 10.512 11.041 13.057 11.251
e 100 | 10.424 11.337 11.989 10.817
  300 | 10.132 11.888 13.314 11.036
Run took a total of Time=183.243 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of Correlation [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  |  7.741  7.173  8.15   6.187
i 33  |  8.248  7.654  7.859  7.609
z 66  | 10.446  9.669  9.808  9.433
e 100 | 11.324 10.616 12.292 11.259
  300 | 14.051 13.907 14.545 13.839

Performance of Correlation [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.833  0.782 0.847 0.755
i 33  | 0.757  0.757 0.822 0.686
z 66  | 0.849  0.94  0.841 0.821
e 100 | 0.938  0.979 0.921 0.909
  300 | 0.775  0.905 0.834 0.887

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  |  9.294  9.178  9.62   8.197
i 33  | 10.894 10.105  9.566 11.092
z 66  | 12.306 10.284 11.667 11.49 
e 100 | 12.07  10.842 13.345 12.39 
  300 | 18.133 15.371 17.443 15.604
Run took a total of Time=261.967 secs. End of run.

Program execution took a total of 35.559467 minutes.
Good bye.
