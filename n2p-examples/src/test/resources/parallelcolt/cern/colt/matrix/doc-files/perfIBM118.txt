Colt Matrix benchmark running on

java.vm.vendor  ?                  
java.vm.version ?                  
java.vm.name    ?                  
os.name         Windows NT         
os.version      4.0                
os.arch         x86                
java.version    1.1.8              
java.vendor     IBM Corporation    
java.vendor.url http://www.ibm.com/


@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix2D assign [Mops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1   0.99 
---------------------------------
s 30  | 9.427   9.242 9.351 9.069
i 33  | 9.021  10.094 9.894 9.439
z 66  | 4.244   5.512 5.094 4.906
e 100 | 5.604   5.169 5.532 5.557
  300 | 5.336   3.38  4.844 5.009

Performance of DoubleMatrix2D assign [Mops/sec]
type=sparse
      | density
      | 0.0010  0.01   0.1   0.99 
----------------------------------
s 30  |  48.749 25.329 5.23  0.858
i 33  |  60.096 30.266 6.647 0.513
z 66  | 170.858 48.24  6.611 0.566
e 100 | 276.408 62.387 4.615 0.697
  300 | 535.505 68.536 6.187 0.445

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1   0.99  
---------------------------------
s 30  | 0.193  0.365 1.788 10.569
i 33  | 0.15   0.334 1.488 18.412
z 66  | 0.025  0.114 0.771  8.669
e 100 | 0.02   0.083 1.199  7.97 
  300 | 0.01   0.049 0.783 11.26 
Run took a total of Time=177.715 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=dense
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 1.784  1.753 1.757 1.76 
i 33  | 1.715  1.749 1.594 1.74 
z 66  | 1.479  1.45  1.488 1.522
e 100 | 1.532  1.522 1.604 1.643
  300 | 1.506  1.463 1.59  1.586

Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.338  0.329 0.284 0.157
i 33  | 0.337  0.325 0.284 0.128
z 66  | 0.329  0.321 0.289 0.138
e 100 | 0.333  0.323 0.27  0.154
  300 | 0.33   0.32  0.283 0.126

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1   0.99  
---------------------------------
s 30  | 5.287  5.334 6.183 11.194
i 33  | 5.086  5.389 5.615 13.617
z 66  | 4.5    4.51  5.146 11.044
e 100 | 4.603  4.711 5.951 10.668
  300 | 4.567  4.579 5.609 12.589
Run took a total of Time=161.893 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=dense
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 1.135  1.173 1.138 1.141
i 33  | 1.131  1.153 1.136 1.142
z 66  | 1.063  1.003 1.031 1.043
e 100 | 1.116  1.079 1.054 1.077
  300 | 0.97   1.117 1.084 1.066

Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.306  0.297 0.26  0.15 
i 33  | 0.305  0.295 0.263 0.119
z 66  | 0.301  0.298 0.261 0.129
e 100 | 0.298  0.293 0.252 0.143
  300 | 0.3    0.29  0.26  0.125

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 3.713  3.945 4.383 7.612
i 33  | 3.711  3.914 4.325 9.638
z 66  | 3.531  3.365 3.942 8.072
e 100 | 3.745  3.682 4.182 7.516
  300 | 3.238  3.853 4.163 8.5  
Run took a total of Time=157.917 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=dense
      | density
      | 0.0010  0.01   0.1    0.99  
------------------------------------
s 30  |  23.694 24.835 24.697 24.504
i 33  |  37.673 28.121 16.455 15.93 
z 66  |  82.096 40.924 14.844 15.789
e 100 | 121.541 55.122 16.807 16.724
  300 | 227.01  88.38  17.17  17.225

Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01   0.1   0.99 
---------------------------------
s 30  |  0.677  0.664 0.628 0.634
i 33  |  6.109  2.056 0.69  0.656
z 66  | 16.042  3.281 0.668 0.67 
e 100 | 23.727  5.348 0.668 0.655
  300 | 60.606 14.815 0.641 0.668

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 34.974 37.381 39.313 38.628
i 33  |  6.167 13.68  23.845 24.299
z 66  |  5.117 12.473 22.236 23.551
e 100 |  5.122 10.308 25.16  25.546
  300 |  3.746  5.966 26.795 25.775
Run took a total of Time=299.03 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1   0.99 
---------------------------------
s 30  | 9.889  11.182 6.61  7.977
i 33  | 4.839   5.526 5.645 5.1  
z 66  | 4.918   4.394 4.486 5.451
e 100 | 4.764   4.829 4.753 4.572
  300 | 3.916   4.066 3.883 3.95 

Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.215  0.215 0.21  0.2  
i 33  | 0.215  0.212 0.207 0.188
z 66  | 0.211  0.211 0.204 0.202
e 100 | 0.216  0.209 0.207 0.192
  300 | 0.213  0.207 0.207 0.23 

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 46.049 52.044 31.467 39.919
i 33  | 22.536 26.119 27.287 27.113
z 66  | 23.308 20.83  21.972 27.004
e 100 | 22.081 23.144 22.987 23.859
  300 | 18.39  19.634 18.752 17.15 
Run took a total of Time=175.102 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of LUQuick.decompose [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  |  9.351  8.513  5.643  5.848
i 33  | 10.169  9.49   6.323  6.572
z 66  | 19.914 19.135  8.97   8.779
e 100 | 33.463 27.261 12.103 10.528
  300 | 76.343 53.386 17.621 13.667

Performance of LUQuick.decompose [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  |  1.95  1.652 0.569 0.267
i 33  |  2.104 1.818 0.54  0.34 
z 66  |  4.315 3.377 0.626 0.255
e 100 |  6.34  4.66  0.802 0.174
  300 | 17.2   9.587 1.034 0.103

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1    0.99   
-----------------------------------
s 30  | 4.795  5.153  9.909  21.908
i 33  | 4.834  5.22  11.716  19.33 
z 66  | 4.615  5.666 14.328  34.415
e 100 | 5.278  5.851 15.086  60.421
  300 | 4.439  5.568 17.039 132.559
Run took a total of Time=331.177 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of LUQuick.solve [Mflops/sec]
type=dense
      | density
      | 0.0010  0.01    0.1    0.99  
-------------------------------------
s 30  |  32.834  37.457 19.365  9.276
i 33  |  42.581  42.096 20.71   9.571
z 66  |  87.239  85.445 16.581 11.115
e 100 | 136.004 154.068 15.976 10.225
  300 | 352.773 195.193 12.294 11.942

Performance of LUQuick.solve [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01   0.1   0.99 
---------------------------------
s 30  |  7.187  7.076 1.674 0.568
i 33  |  8.88   7.594 1.581 0.574
z 66  | 15.581 14.93  0.984 0.577
e 100 | 23.163 20.07  0.917 0.58 
  300 | 70.272 14.202 0.661 0.567

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 4.568   5.293 11.566 16.331
i 33  | 4.795   5.543 13.099 16.665
z 66  | 5.599   5.723 16.852 19.262
e 100 | 5.872   7.677 17.424 17.642
  300 | 5.02   13.744 18.613 21.048
Run took a total of Time=373.947 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of SOR [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 9.801   9.558 10.156 10.003
i 33  | 9.901   8.684 10.725 10.774
z 66  | 9.42   10.02   9.644  9.536
e 100 | 9.454   9.588  9.689  8.013
  300 | 9.538   9.095  9.523  9.455

Performance of SOR [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.749  0.727 0.645 0.724
i 33  | 0.755  0.721 0.643 0.725
z 66  | 0.694  0.678 0.609 0.69 
e 100 | 0.686  0.679 0.582 0.662
  300 | 0.669  0.642 0.576 0.616

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 13.08  13.14  15.737 13.82 
i 33  | 13.121 12.04  16.69  14.868
z 66  | 13.569 14.771 15.827 13.817
e 100 | 13.791 14.113 16.657 12.099
  300 | 14.266 14.171 16.542 15.339
Run took a total of Time=164.167 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of Correlation [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  |  6.538  6.279  7.071  6.613
i 33  |  6.973  6.998  7.728  6.318
z 66  |  9.657  9.615 10.316  9.861
e 100 | 10.641  9.257 11.526  9.897
  300 | 12.671 15.547 15.547 15.283

Performance of Correlation [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.515  0.542 0.546 0.52 
i 33  | 0.52   0.523 0.536 0.417
z 66  | 0.461  0.583 0.494 0.518
e 100 | 0.568  0.636 0.559 0.613
  300 | 0.529  0.58  0.58  0.603

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 12.697 11.593 12.944 12.72 
i 33  | 13.422 13.39  14.417 15.156
z 66  | 20.954 16.497 20.891 19.031
e 100 | 18.728 14.55  20.628 16.144
  300 | 23.935 26.799 26.816 25.351
Run took a total of Time=327.2 secs. End of run.

Program execution took a total of 36.173347 minutes.
Good bye.
