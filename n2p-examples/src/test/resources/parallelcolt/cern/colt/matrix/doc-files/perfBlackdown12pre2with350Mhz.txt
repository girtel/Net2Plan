Matrix benchmark running on

java.vm.vendor  Sun Microsystems Inc.
java.vm.version 1.2                  
java.vm.name    Classic VM           
os.name         Linux                
os.version      2.0.35               
os.arch         i386                 
java.version    1.2                  
java.vendor.url http://java.sun.com/ 


@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix2D assign [Mops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 37.772 40.493 37.596 39.108
i 33  | 35.931 31.273 29.131 28.822
z 66  | 25.905 26.243 26.078 26.423
e 100 | 19.681 26.375 25.497 24.463
  300 | 10.355  9.897 10.529 10.279

Performance of DoubleMatrix2D assign [Mops/sec]
type=sparse
      | density
      | 0.0010  0.01    0.1    0.99 
------------------------------------
s 30  |  34.238  19.227  7.641 1.648
i 33  |  68.982  19.067  9.239 1.144
z 66  | 124.51   51.374 13.159 1.351
e 100 | 185.214  80.052 10.547 1.568
  300 | 784.392 163.194 14.102 0.759

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1   0.99  
---------------------------------
s 30  | 1.103  2.106 4.92  23.727
i 33  | 0.521  1.64  3.153 25.204
z 66  | 0.208  0.511 1.982 19.556
e 100 | 0.106  0.329 2.418 15.6  
  300 | 0.013  0.061 0.747 13.545
Run took a total of Time=174.361 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=dense
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 2.532  2.521 2.523 2.526
i 33  | 2.473  2.475 2.483 2.465
z 66  | 2.483  2.462 2.486 2.363
e 100 | 2.489  2.454 2.493 2.49 
  300 | 2.227  2.255 2.246 2.217

Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.503  0.477 0.415 0.227
i 33  | 0.501  0.474 0.421 0.188
z 66  | 0.485  0.479 0.429 0.209
e 100 | 0.489  0.479 0.414 0.228
  300 | 0.487  0.473 0.425 0.176

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1   0.99  
---------------------------------
s 30  | 5.033  5.289 6.085 11.107
i 33  | 4.932  5.22  5.901 13.082
z 66  | 5.115  5.144 5.789 11.32 
e 100 | 5.09   5.126 6.021 10.909
  300 | 4.571  4.763 5.291 12.632
Run took a total of Time=158.716 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=dense
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 1.496  1.46  1.491 1.489
i 33  | 1.473  1.473 1.469 1.471
z 66  | 1.465  1.478 1.475 1.476
e 100 | 1.469  1.479 1.483 1.481
  300 | 1.275  1.377 1.353 1.375

Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.443  0.419 0.371 0.214
i 33  | 0.442  0.418 0.376 0.169
z 66  | 0.426  0.421 0.382 0.19 
e 100 | 0.43   0.422 0.372 0.216
  300 | 0.428  0.417 0.377 0.173

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 3.375  3.485 4.014 6.959
i 33  | 3.336  3.526 3.909 8.695
z 66  | 3.436  3.515 3.858 7.782
e 100 | 3.42   3.505 3.991 6.858
  300 | 2.98   3.298 3.594 7.964
Run took a total of Time=157.747 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=dense
      | density
      | 0.0010  0.01    0.1    0.99  
-------------------------------------
s 30  |  10.028  10.018 10.028 10.018
i 33  |  36.256  24.784 13.77  13.385
z 66  |  85.718  44.97  16.937 17.048
e 100 | 132.518  65.163 19.305 19.675
  300 | 340.157 118.317 16.206 13.957

Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01   0.1   0.99 
---------------------------------
s 30  |  0.887  0.858 0.828 0.668
i 33  |  8.227  2.699 0.875 0.937
z 66  | 21.19   4.479 0.908 0.975
e 100 | 30.907  7.303 0.908 0.985
  300 | 82.537 20.493 0.853 0.947

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 11.305 11.676 12.107 14.987
i 33  |  4.407  9.182 15.74  14.283
z 66  |  4.045 10.04  18.646 17.485
e 100 |  4.288  8.923 21.264 19.98 
  300 |  4.121  5.773 19.001 14.738
Run took a total of Time=253.718 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 6.684  6.63  6.589 6.751
i 33  | 6.677  6.713 6.757 6.862
z 66  | 6.982  7.058 7.068 7    
e 100 | 7.274  6.383 6.856 7.334
  300 | 4.238  4.105 4.142 4.128

Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.311  0.311 0.296 0.317
i 33  | 0.304  0.304 0.303 0.3  
z 66  | 0.308  0.309 0.3   0.277
e 100 | 0.309  0.308 0.308 0.281
  300 | 0.309  0.301 0.284 0.205

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 21.489 21.333 22.24  21.295
i 33  | 22.001 22.089 22.279 22.855
z 66  | 22.701 22.811 23.522 25.308
e 100 | 23.511 20.745 22.288 26.128
  300 | 13.71  13.638 14.583 20.089
Run took a total of Time=162.957 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of LUQuick.decompose [Mflops/sec]
type=dense
      | density
      | 0.0010  0.01   0.1    0.99  
------------------------------------
s 30  |   9.552  8.783  5.388  5.136
i 33  |  10.741  9.897  5.81   5.782
z 66  |  24.068 21.47  10.347  9.467
e 100 |  37.491 32.28  14.422 11.832
  300 | 105.263 77.847 21.713 16.158

Performance of LUQuick.decompose [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01   0.1   0.99 
---------------------------------
s 30  |  2.575  2.133 0.702 0.353
i 33  |  2.747  2.342 0.663 0.424
z 66  |  5.774  4.442 0.802 0.319
e 100 |  8.222  6.143 1.062 0.237
  300 | 23.377 13.319 1.318 0.145

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1    0.99   
-----------------------------------
s 30  | 3.709  4.119  7.672  14.538
i 33  | 3.91   4.226  8.765  13.647
z 66  | 4.169  4.834 12.909  29.649
e 100 | 4.56   5.255 13.58   50.015
  300 | 4.503  5.845 16.474 111.603
Run took a total of Time=275.21 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of LUQuick.solve [Mflops/sec]
type=dense
      | density
      | 0.0010  0.01    0.1    0.99  
-------------------------------------
s 30  |  45.625  37.152 20.652  9.721
i 33  |  52.179  51.074 22.264 10.256
z 66  | 118.886 112.129 21.499 13.246
e 100 | 187.056 176.012 22.422 14.846
  300 | 508.467 278.274 16.231 14.433

Performance of LUQuick.solve [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01   0.1   0.99 
---------------------------------
s 30  |  9.399  9.253 1.757 0.611
i 33  |  9.867 10.165 1.8   0.61 
z 66  | 21.034 20.108 1.073 0.566
e 100 | 31.889 30.134 0.993 0.617
  300 | 94.803 16.99  0.68  0.61 

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 4.854   4.015 11.751 15.909
i 33  | 5.289   5.025 12.37  16.823
z 66  | 5.652   5.576 20.036 23.397
e 100 | 5.866   5.841 22.588 24.047
  300 | 5.363  16.379 23.852 23.654
Run took a total of Time=350.137 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of SOR [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 6.733  6.914 6.899 6.894
i 33  | 6.881  6.873 6.713 6.787
z 66  | 6.473  6.394 6.393 6.397
e 100 | 6.387  6.332 6.344 6.347
  300 | 5.543  5.552 5.838 5.819

Performance of SOR [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 1.056  1.065 0.875 1.163
i 33  | 1.056  1.043 0.981 1.081
z 66  | 0.993  0.988 0.882 1.063
e 100 | 0.967  0.924 0.83  0.953
  300 | 0.953  0.913 0.838 0.958

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 6.375  6.493 7.889 5.929
i 33  | 6.518  6.589 6.841 6.278
z 66  | 6.517  6.47  7.252 6.018
e 100 | 6.606  6.853 7.64  6.661
  300 | 5.815  6.079 6.965 6.074
Run took a total of Time=151.213 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of Correlation [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01  0.1    0.99 
---------------------------------
s 30  |  5.384 3.978  2.221 3.9  
i 33  |  5.831 3.993  2.471 4.151
z 66  |  8.94  5.459  3.998 5.825
e 100 | 10.052 6.737  5.752 7.301
  300 | 12.724 9.938 10.131 9.637

Performance of Correlation [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.757  0.719 0.63  0.689
i 33  | 0.761  0.683 0.638 0.69 
z 66  | 0.799  0.778 0.745 0.819
e 100 | 0.867  0.862 0.831 0.889
  300 | 0.772  0.855 0.813 0.896

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  |  7.115  5.533  3.527  5.664
i 33  |  7.664  5.842  3.872  6.017
z 66  | 11.196  7.018  5.365  7.116
e 100 | 11.595  7.817  6.92   8.212
  300 | 16.472 11.624 12.463 10.76 
Run took a total of Time=254.412 secs. End of run.

Program execution took a total of 32.3259 minutes.
Good bye.
