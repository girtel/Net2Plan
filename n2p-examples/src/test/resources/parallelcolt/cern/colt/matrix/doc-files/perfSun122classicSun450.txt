Colt Matrix benchmark running on

java.vm.vendor  Sun Microsystems Inc.
java.vm.version 1.2.2                
java.vm.name    Classic VM           
os.name         SunOS                
os.version      5.6                  
os.arch         sparc                
java.version    1.2.2                
java.vendor     Sun Microsystems Inc.
java.vendor.url http://java.sun.com/ 


@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix2D assign [Mops/sec]
type=dense
       | density
       | 0.0010 0.01   0.1    0.999 
------------------------------------
s 30   | 50.611 48.976 51.422 40.998
i 33   | 51.926 50.73  51.232 51.087
z 66   | 35.672 38.747 37.082 66.355
e 100  | 34.61  34.919 45.341 79.38 
  300  | 33.078 34.945 58.917 32.68 
  1000 | 30.359 33.066 35.247 33.203

Performance of DoubleMatrix2D assign [Mops/sec]
type=sparse
       | density
       | 0.0010       0.01    0.1     0.999  
---------------------------------------------
s 30   |  52.678       32.446  12.073   2.422
i 33   |  67.286       41.431  14.09    1.792
z 66   | 198.475       91.727  20.491   2.146
e 100  | 334.124      128.369 NaN     NaN    
  300  |   1.17E+003  243.04  NaN     NaN    
  1000 |   1.587E+003 264.553 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 0.961  1.509   4.259  16.924
i 33   | 0.772  1.224   3.636  28.512
z 66   | 0.18   0.422   1.81   30.919
e 100  | 0.104  0.272 NaN     NaN    
  300  | 0.028  0.144 NaN     NaN    
  1000 | 0.019  0.125 NaN     NaN    
Run took a total of Time=207.358 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=dense
       | density
       | 0.0010 0.01  0.1   0.999
---------------------------------
s 30   | 2.14   2.109 2.154 2.367
i 33   | 2.305  2.282 1.71  2.275
z 66   | 2.175  2.015 2.098 2.102
e 100  | 2.172  2.175 2.176 2.182
  300  | 2.095  2.088 1.969 2.061
  1000 | 1.889  1.998 1.804 1.993

Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 0.481  0.471   0.413   0.252
i 33   | 0.493  0.474   0.432   0.212
z 66   | 0.471  0.463   0.432   0.229
e 100  | 0.472  0.474 NaN     NaN    
  300  | 0.479  0.453 NaN     NaN    
  1000 | 0.465  0.462 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 4.451  4.474   5.209   9.393
i 33   | 4.671  4.815   3.96   10.711
z 66   | 4.618  4.35    4.861   9.168
e 100  | 4.6    4.594 NaN     NaN    
  300  | 4.377  4.606 NaN     NaN    
  1000 | 4.062  4.324 NaN     NaN    
Run took a total of Time=162.74 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=dense
       | density
       | 0.0010 0.01  0.1   0.999
---------------------------------
s 30   | 1.455  1.377 1.42  1.199
i 33   | 1.363  1.371 1.367 1.307
z 66   | 1.344  1.342 1.342 1.131
e 100  | 1.346  1.343 1.347 1.346
  300  | 1.212  1.315 1.129 1.294
  1000 | 1.203  1.268 1.265 1.259

Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 0.42   0.396   0.34    0.232
i 33   | 0.418  0.413   0.351   0.197
z 66   | 0.413  0.405   0.381   0.21 
e 100  | 0.415  0.41  NaN     NaN    
  300  | 0.395  0.402 NaN     NaN    
  1000 | 0.411  0.405 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 3.466  3.477   4.172   5.157
i 33   | 3.265  3.322   3.896   6.626
z 66   | 3.257  3.318   3.519   5.379
e 100  | 3.241  3.275 NaN     NaN    
  300  | 3.065  3.268 NaN     NaN    
  1000 | 2.93   3.131 NaN     NaN    
Run took a total of Time=163.725 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=dense
       | density
       | 0.0010  0.01    0.1    0.999 
--------------------------------------
s 30   |  23.683  23.746 23.571 23.341
i 33   |  44.956  32.32  18.397 18.803
z 66   |  96.951  43.991 23.803 20.81 
e 100  | 153.296  77.975 27.317 25.048
  300  | 384.146 138.402 23.841 23.067
  1000 | 760.746 153.198 22.933 22.523

Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=sparse
       | density
       | 0.0010  0.01   0.1     0.999  
---------------------------------------
s 30   |   0.994  0.971   0.914   0.924
i 33   |   9.056  2.938   1.001   1.046
z 66   |  23.533  4.668   0.971   0.998
e 100  |  34.247  7.855 NaN     NaN    
  300  |  89.293 21.386 NaN     NaN    
  1000 | 210.793 40.989 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   | 23.837 24.454  25.778  25.255
i 33   |  4.964 11.001  18.374  17.973
z 66   |  4.12   9.424  24.507  20.856
e 100  |  4.476  9.927 NaN     NaN    
  300  |  4.302  6.472 NaN     NaN    
  1000 |  3.609  3.737 NaN     NaN    
Run took a total of Time=385.078 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=dense
       | density
       | 0.0010 0.01   0.1    0.999 
------------------------------------
s 30   | 12.067 14.148 14.365 12.862
i 33   | 11.744 14.002 11.695 10.333
z 66   | 11.347  8.23   8.394  7.249
e 100  |  7.706  7.401  7.99   7.523
  300  |  7.577  8.612 11.519 12.082
  1000 |  7.589  7.665  7.784  7.514

Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 0.292  0.294   0.294   0.267
i 33   | 0.286  0.287   0.291   0.262
z 66   | 0.293  0.295   0.273   0.275
e 100  | 0.281  0.292 NaN     NaN    
  300  | 0.291  0.28  NaN     NaN    
  1000 | 0.283  0.283 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   | 41.26  48.054  48.88   48.196
i 33   | 40.993 48.786  40.187  39.459
z 66   | 38.782 27.916  30.804  26.334
e 100  | 27.458 25.339 NaN     NaN    
  300  | 26.051 30.742 NaN     NaN    
  1000 | 26.812 27.073 NaN     NaN    
Run took a total of Time=172.681 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of LUQuick.decompose [Mflops/sec]
type=dense
       | density
       | 0.0010  0.01    0.1    0.999 
--------------------------------------
s 30   |  10.433   9.52   6.793  6.517
i 33   |   9.453  10.928  7.379  7.09 
z 66   |  25.092  22.833 12.822  9.718
e 100  |  37.446  31.121 18.018 15.737
  300  | 105.058  83.955 24.194 24.011
  1000 | 276.51  164.487 30.901 24.527

Performance of LUQuick.decompose [Mflops/sec]
type=sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   |  2.796  2.417   0.835   0.188
i 33   |  3.046  2.604   0.791   0.336
z 66   |  6.267  4.794   0.928   0.137
e 100  |  8.996  6.219 NaN     NaN    
  300  | 25.14  14.09  NaN     NaN    
  1000 | 66.381 20.176 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 3.731  3.939   8.136  34.759
i 33   | 3.104  4.197   9.333  21.128
z 66   | 4.004  4.763  13.815  70.908
e 100  | 4.162  5.004 NaN     NaN    
  300  | 4.179  5.958 NaN     NaN    
  1000 | 4.165  8.153 NaN     NaN    
Run took a total of Time=236.709 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of LUQuick.solve [Mflops/sec]
type=dense
       | density
       | 0.0010       0.01    0.1    0.999 
-------------------------------------------
s 30   |  54.678       54.323 30.43  15.455
i 33   |  61.571       58.902 37.943 15.235
z 66   | 125.419      122.047 25.812 15.815
e 100  | 204.674      188.824 31.108 20.24 
  300  | 641.5        475.727 25.118 21.509
  1000 |   1.777E+003  71.963 19.394 19.598

Performance of LUQuick.solve [Mflops/sec]
type=sparse
       | density
       | 0.0010  0.01   0.1     0.999  
---------------------------------------
s 30   |   9.281  9.277   2.095   0.764
i 33   |  10.179 10.145   2.155   0.743
z 66   |  20.618 18.586   1.303   0.77 
e 100  |  30.405 28.451 NaN     NaN    
  300  |  91.831 17.793 NaN     NaN    
  1000 | 303.471  2.643 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   | 5.891   5.856  14.525  20.219
i 33   | 6.049   5.806  17.605  20.505
z 66   | 6.083   6.567  19.802  20.528
e 100  | 6.732   6.637 NaN     NaN    
  300  | 6.986  26.737 NaN     NaN    
  1000 | 5.856  27.23  NaN     NaN    
Run took a total of Time=1253.427 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of SOR [Mflops/sec]
type=dense
       | density
       | 0.0010 0.01   0.1    0.999 
------------------------------------
s 30   | 10.915 10.975 10.814 10.694
i 33   | 10.184 10.61  10.862 10.399
z 66   |  9.536  9.225  9.816  9.636
e 100  |  9.434  9.457  9.625  9.684
  300  |  9.367  9.759  9.444  9.694
  1000 |  9.188  9.105  9.17   9.114

Performance of SOR [Mflops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 1.106  1.09    0.912   1.049
i 33   | 1.084  1.076   0.972   1.093
z 66   | 0.96   0.997   0.884   0.915
e 100  | 0.96   0.978 NaN     NaN    
  300  | 0.955  0.917 NaN     NaN    
  1000 | 0.957  0.92  NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   | 9.868  10.071  11.859  10.198
i 33   | 9.398   9.857  11.175   9.512
z 66   | 9.929   9.254  11.101  10.536
e 100  | 9.827   9.667 NaN     NaN    
  300  | 9.805  10.645 NaN     NaN    
  1000 | 9.597   9.901 NaN     NaN    
Run took a total of Time=171.003 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of Correlation [Mflops/sec]
type=dense
       | density
       | 0.0010 0.01   0.1    0.999 
------------------------------------
s 30   |  7.781  7.453  5.712  8.237
i 33   |  8.949  8.048  6.039  8.78 
z 66   | 11.984 11.58   9.195 13.767
e 100  | 17.042 12.974 11.266 16.724
  300  | 24.372 20.141 19.716 20.269
  1000 | 23.261 21.518 22.949 24.271

Performance of Correlation [Mflops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 0.953  0.95    0.874   0.936
i 33   | 0.97   0.946   0.882   0.914
z 66   | 0.964  0.986   0.902   0.971
e 100  | 1.016  0.989 NaN     NaN    
  300  | 1.041  0.993 NaN     NaN    
  1000 | 1.051  1.021 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   |  8.169  7.845   6.535   8.803
i 33   |  9.23   8.511   6.851   9.604
z 66   | 12.436 11.751  10.199  14.178
e 100  | 16.778 13.122 NaN     NaN    
  300  | 23.402 20.286 NaN     NaN    
  1000 | 22.124 21.066 NaN     NaN    
Run took a total of Time=2291.935 secs. End of run.

Program execution took a total of 84.087814 minutes.
Good bye.
