Colt Matrix benchmark running on

java.vm.vendor  Sun Microsystems Inc.
java.vm.version 1.2.2                
java.vm.name    Classic VM           
os.name         Linux                
os.version      2.2.12-20            
os.arch         i386                 
java.version    1.2.2                
java.vendor     Sun Microsystems Inc.
java.vendor.url http://java.sun.com/ 


@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix2D assign [Mops/sec]
type=dense
       | density
       | 0.0010 0.01   0.1    0.999 
------------------------------------
s 30   | 72.148 72.856 77.553 65.259
i 33   | 55.993 60.265 66.304 47.264
z 66   | 41.874 41.737 41.502 41.344
e 100  | 40.807 41.364 42.104 41.375
  300  | 20.258 20.157 20.429 20.357
  1000 | 19.399 19.324 19.342 19.342

Performance of DoubleMatrix2D assign [Mops/sec]
type=sparse
       | density
       | 0.0010       0.01    0.1     0.999  
---------------------------------------------
s 30   |  62.035       28.36   13.683   2.644
i 33   |  95.487       51.332  17.624   1.807
z 66   | 297.188      111.492  21.432   2.31 
e 100  | 377.066      150.811 NaN     NaN    
  300  |   1.323E+003 264.146 NaN     NaN    
  1000 |   1.628E+003 275.615 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 1.163  2.569   5.668  24.683
i 33   | 0.586  1.174   3.762  26.15 
z 66   | 0.141  0.374   1.936  17.898
e 100  | 0.108  0.274 NaN     NaN    
  300  | 0.015  0.076 NaN     NaN    
  1000 | 0.012  0.07  NaN     NaN    
Run took a total of Time=190.751 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=dense
       | density
       | 0.0010 0.01  0.1   0.999
---------------------------------
s 30   | 4.927  4.744 4.931 4.958
i 33   | 4.517  4.857 4.868 4.823
z 66   | 5.016  4.938 4.918 4.891
e 100  | 4.912  4.938 4.932 4.926
  300  | 4.18   4.176 4.107 4.188
  1000 | 4.037  4.039 4.042 4.037

Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 1      0.932   0.812   0.445
i 33   | 1.002  0.932   0.764   0.349
z 66   | 0.957  0.938   0.802   0.389
e 100  | 0.964  0.941 NaN     NaN    
  300  | 0.959  0.93  NaN     NaN    
  1000 | 0.954  0.933 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 4.927  5.092   6.071  11.138
i 33   | 4.508  5.209   6.369  13.816
z 66   | 5.241  5.266   6.134  12.561
e 100  | 5.098  5.248 NaN     NaN    
  300  | 4.359  4.49  NaN     NaN    
  1000 | 4.231  4.328 NaN     NaN    
Run took a total of Time=168.947 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=dense
       | density
       | 0.0010 0.01  0.1   0.999
---------------------------------
s 30   | 2.793  2.767 2.82  2.77 
i 33   | 2.812  2.802 2.773 2.805
z 66   | 2.824  2.821 2.825 2.858
e 100  | 2.823  2.78  2.851 2.811
  300  | 2.562  2.516 2.512 2.526
  1000 | 2.493  2.444 2.441 2.463

Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 0.861  0.811   0.716   0.395
i 33   | 0.858  0.81    0.728   0.326
z 66   | 0.829  0.815   0.7     0.362
e 100  | 0.833  0.816 NaN     NaN    
  300  | 0.83   0.81  NaN     NaN    
  1000 | 0.828  0.812 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 3.246  3.411   3.941   7.015
i 33   | 3.277  3.46    3.811   8.594
z 66   | 3.407  3.459   4.033   7.883
e 100  | 3.391  3.406 NaN     NaN    
  300  | 3.086  3.105 NaN     NaN    
  1000 | 3.011  3.011 NaN     NaN    
Run took a total of Time=164.045 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=dense
       | density
       | 0.0010       0.01    0.1    0.999 
-------------------------------------------
s 30   |  18.498       18.497 16.814 18.434
i 33   |  75.999       44.205 16.987 19.993
z 66   | 180.208       77.364 24.675 24.234
e 100  | 269.628      107.28  26.316 26.163
  300  | 634.321      175.732 20.052 22.059
  1000 |   1.238E+003 201.066 18.932 18.935

Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=sparse
       | density
       | 0.0010  0.01   0.1     0.999  
---------------------------------------
s 30   |   1.344  1.306   1.274   1.345
i 33   |  13.965  3.411   1.094   1.101
z 66   |  43.325  5.637   1.057   1.123
e 100  |  62.718  9.634 NaN     NaN    
  300  | 167.183 32.423 NaN     NaN    
  1000 | 392.696 75.25  NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   | 13.762 14.163  13.201  13.709
i 33   |  5.442 12.961  15.53   18.162
z 66   |  4.159 13.724  23.345  21.58 
e 100  |  4.299 11.136 NaN     NaN    
  300  |  3.794  5.42  NaN     NaN    
  1000 |  3.153  2.672 NaN     NaN    
Run took a total of Time=391.957 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=dense
       | density
       | 0.0010 0.01   0.1    0.999 
------------------------------------
s 30   | 11.469 11.025 10.981 11.229
i 33   | 11     11.015 11.256 11.643
z 66   | 11.947 11.82  11.874 11.874
e 100  | 12.112 11.981 11.828 11.952
  300  |  7.753  6.403  6.547  6.471
  1000 |  7.874  6.605  6.605  6.609

Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 0.609  0.608   0.6     0.618
i 33   | 0.607  0.601   0.565   0.57 
z 66   | 0.603  0.604   0.589   0.565
e 100  | 0.606  0.605 NaN     NaN    
  300  | 0.606  0.591 NaN     NaN    
  1000 | 0.611  0.577 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   | 18.844 18.127  18.317  18.183
i 33   | 18.107 18.319  19.908  20.417
z 66   | 19.815 19.573  20.161  21.021
e 100  | 19.985 19.793 NaN     NaN    
  300  | 12.787 10.84  NaN     NaN    
  1000 | 12.89  11.44  NaN     NaN    
Run took a total of Time=171.221 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of LUQuick.decompose [Mflops/sec]
type=dense
       | density
       | 0.0010  0.01    0.1    0.999 
--------------------------------------
s 30   |  18.982  17.223  8.871 10.844
i 33   |  21.144  19.34  11.536 11.954
z 66   |  46.86   41.798 20.639 20.001
e 100  |  72.479  62.436 29.51  25.456
  300  | 200.101 148.991 43.647 34.466
  1000 | 559.754 279.877 32.319 29.631

Performance of LUQuick.decompose [Mflops/sec]
type=sparse
       | density
       | 0.0010  0.01   0.1     0.999  
---------------------------------------
s 30   |   5.005  4.139   1.356   0.4  
i 33   |   5.339  4.535   1.282   0.659
z 66   |  11.359  8.552   1.556   0.322
e 100  |  16.029 12.015 NaN     NaN    
  300  |  45.169 25.912 NaN     NaN    
  1000 | 122.752 37.729 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 3.792  4.162   6.544  27.083
i 33   | 3.96   4.265   9      18.148
z 66   | 4.126  4.887  13.264  62.116
e 100  | 4.522  5.197 NaN     NaN    
  300  | 4.43   5.75  NaN     NaN    
  1000 | 4.56   7.418 NaN     NaN    
Run took a total of Time=208.389 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of LUQuick.solve [Mflops/sec]
type=dense
       | density
       | 0.0010       0.01    0.1    0.999 
-------------------------------------------
s 30   |  77.259       75.015 36.129 13.482
i 33   |  88.404       85.518 38.265 13.852
z 66   | 194.44       189.424 27.088 15.565
e 100  | 297.059      288.72  25.301 16.252
  300  | 830.455      462.612 17.97  15.271
  1000 |   2.592E+003  51.529 14.909 14.416

Performance of LUQuick.solve [Mflops/sec]
type=sparse
       | density
       | 0.0010  0.01   0.1     0.999  
---------------------------------------
s 30   |  17.994 17.379   3.66    1.446
i 33   |  19.73  19.331   3.703   1.463
z 66   |  40.044 36.5     2.477   1.474
e 100  |  60.849 54.269 NaN     NaN    
  300  | 179.829 34.356 NaN     NaN    
  1000 | 596.899  4.884 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   | 4.294   4.316   9.871   9.325
i 33   | 4.481   4.424  10.335   9.465
z 66   | 4.856   5.19   10.937  10.56 
e 100  | 4.882   5.32  NaN     NaN    
  300  | 4.618  13.465 NaN     NaN    
  1000 | 4.343  10.55  NaN     NaN    
Run took a total of Time=955.159 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of SOR [Mflops/sec]
type=dense
       | density
       | 0.0010 0.01   0.1    0.999 
------------------------------------
s 30   | 13.27  13.236 13.301 13.264
i 33   | 13.301 13.226 13.112 13.099
z 66   | 12.518 12.526 12.526 12.477
e 100  | 12.208 12.22  12.208 12.227
  300  | 10.9   10.942 10.954 10.942
  1000 | 10.676 10.7   10.7   10.71 

Performance of SOR [Mflops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 2.055  1.972   1.881   2.186
i 33   | 2.042  2.021   1.854   2.066
z 66   | 1.924  1.911   1.657   1.979
e 100  | 1.895  1.807 NaN     NaN    
  300  | 1.848  1.769 NaN     NaN    
  1000 | 1.843  1.752 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 6.458  6.712   7.071   6.069
i 33   | 6.512  6.543   7.073   6.34 
z 66   | 6.505  6.553   7.557   6.304
e 100  | 6.441  6.764 NaN     NaN    
  300  | 5.9    6.186 NaN     NaN    
  1000 | 5.792  6.108 NaN     NaN    
Run took a total of Time=165.514 secs. End of run.

@x....x....x....x....x....x....
@x....x....x....x....x....x....*
Performance of Correlation [Mflops/sec]
type=dense
       | density
       | 0.0010 0.01   0.1    0.999 
------------------------------------
s 30   | 11.324  9.106  5.681 10.675
i 33   | 12.262  9.522  6.291 11.842
z 66   | 18.938 13.537 10.745 18.629
e 100  | 23.126 16.525 14.326 22.83 
  300  | 25.533 21.681 20.007 27.345
  1000 | 21.805 24.525 24.658 25.25 

Performance of Correlation [Mflops/sec]
type=sparse
       | density
       | 0.0010 0.01  0.1     0.999  
-------------------------------------
s 30   | 0.998  0.975   0.91    1.007
i 33   | 1.008  0.975   0.917   1.011
z 66   | 1.036  1.013   0.976   1.047
e 100  | 1.046  1.023 NaN     NaN    
  300  | 1.063  1.033 NaN     NaN    
  1000 | 1.078  1.052 NaN     NaN    

Speedup of dense over sparse
       | density
       | 0.0010 0.01   0.1     0.999  
--------------------------------------
s 30   | 11.347  9.344   6.241  10.599
i 33   | 12.163  9.768   6.857  11.717
z 66   | 18.282 13.365  11.013  17.785
e 100  | 22.103 16.154 NaN     NaN    
  300  | 24.029 20.986 NaN     NaN    
  1000 | 20.235 23.322 NaN     NaN    
Run took a total of Time=2228.253 secs. End of run.

Program execution took a total of 77.4098 minutes.
Good bye.
