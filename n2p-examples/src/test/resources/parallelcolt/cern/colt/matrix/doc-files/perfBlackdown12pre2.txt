Colt Matrix benchmark running on

java.vm.vendor  Sun Microsystems Inc.
java.vm.version 1.2                  
java.vm.name    Classic VM           
os.name         Linux                
os.version      2.2.12-20            
os.arch         i386                 
java.version    1.2                  
java.vendor     Sun Microsystems Inc.
java.vendor.url http://java.sun.com/ 


@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix2D assign [Mops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 94.226 82.951 83.753 87.891
i 33  | 59.244 41.933 62.03  58.52 
z 66  | 41.457 38.795 39.744 39.11 
e 100 | 39.656 39.464 39.96  39.626
  300 | 18.506 17.738 17.907 17.804

Performance of DoubleMatrix2D assign [Mops/sec]
type=sparse
      | density
      | 0.0010       0.01    0.1    0.99 
-----------------------------------------
s 30  |  54.517       30.869 13.099 2.564
i 33  | 113.38        37.577 16.068 1.737
z 66  | 298.229       92.842 21.464 2.121
e 100 | 307.347      147.517 16.044 2.676
  300 |   1.289E+003 259.31  23.216 1.174

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1   0.99  
---------------------------------
s 30  | 1.728  2.687 6.394 34.273
i 33  | 0.523  1.116 3.86  33.693
z 66  | 0.139  0.418 1.852 18.44 
e 100 | 0.129  0.268 2.491 14.808
  300 | 0.014  0.068 0.771 15.171
Run took a total of Time=181.15 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=dense
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 4.242  4.264 4.269 4.279
i 33  | 4.252  4.22  4.242 4.217
z 66  | 4.16   4.309 4.216 4.218
e 100 | 4.232  4.217 4.272 4.281
  300 | 3.746  3.706 3.602 3.582

Performance of DoubleMatrix2D assignGetSetQuick [Mops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.904  0.869 0.73  0.391
i 33  | 0.908  0.86  0.769 0.32 
z 66  | 0.899  0.867 0.787 0.356
e 100 | 0.907  0.888 0.722 0.391
  300 | 0.898  0.877 0.76  0.31 

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1   0.99  
---------------------------------
s 30  | 4.694  4.905 5.85  10.955
i 33  | 4.682  4.907 5.516 13.182
z 66  | 4.626  4.968 5.356 11.851
e 100 | 4.667  4.748 5.915 10.946
  300 | 4.172  4.225 4.739 11.571
Run took a total of Time=160.328 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=dense
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 2.667  2.657 2.676 2.672
i 33  | 2.645  2.645 2.645 2.645
z 66  | 2.655  2.65  2.654 2.653
e 100 | 2.647  2.634 2.644 2.63 
  300 | 2.409  2.385 2.409 2.38 

Performance of DoubleMatrix2D assignGetSet [Mops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.839  0.79  0.637 0.379
i 33  | 0.837  0.789 0.703 0.315
z 66  | 0.806  0.795 0.682 0.351
e 100 | 0.814  0.796 0.693 0.386
  300 | 0.807  0.785 0.692 0.307

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 3.18   3.365 4.2   7.042
i 33  | 3.159  3.351 3.76  8.393
z 66  | 3.294  3.332 3.893 7.567
e 100 | 3.251  3.308 3.812 6.822
  300 | 2.985  3.037 3.479 7.74 
Run took a total of Time=156.659 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=dense
      | density
      | 0.0010  0.01    0.1    0.99  
-------------------------------------
s 30  |  23.649  23.584 23.632 23.617
i 33  |  71.912  49.372 27.959 22.081
z 66  | 172.052  94.519 33.433 33.772
e 100 | 264.948 126.199 37.792 39.168
  300 | 654.718 216.108 24.977 24.324

Performance of DoubleMatrix.zMult(B,C) [Mflops/sec]
type=sparse
      | density
      | 0.0010  0.01   0.1   0.99 
----------------------------------
s 30  |   1.84   1.769 1.696 1.793
i 33  |  14.957  4.684 1.585 1.636
z 66  |  39.289  7.778 1.56  1.674
e 100 |  57.171 12.72  1.561 1.692
  300 | 151.331 36.193 1.472 1.598

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 12.855 13.334 13.935 13.173
i 33  |  4.808 10.54  17.635 13.498
z 66  |  4.379 12.153 21.436 20.175
e 100 |  4.634  9.921 24.206 23.148
  300 |  4.326  5.971 16.965 15.224
Run took a total of Time=208.171 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 16.224 16.965 16.075 16.154
i 33  | 15.962 15.211 16.787 17.103
z 66  | 16.869 14.916 14.929 14.919
e 100 | 14.73  14.709 14.713 14.601
  300 |  6.952  6.664  6.814  9.229

Performance of DoubleMatrix Elementwise mult [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 0.558  0.555 0.576 0.53 
i 33  | 0.555  0.55  0.542 0.531
z 66  | 0.545  0.554 0.538 0.52 
e 100 | 0.556  0.551 0.549 0.501
  300 | 0.555  0.54  0.52  0.486

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 29.102 30.563 27.902 30.486
i 33  | 28.779 27.643 30.96  32.179
z 66  | 30.965 26.935 27.741 28.674
e 100 | 26.487 26.704 26.81  29.118
  300 | 12.52  12.348 13.112 19.005
Run took a total of Time=164.533 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of LUQuick.decompose [Mflops/sec]
type=dense
      | density
      | 0.0010  0.01    0.1    0.99  
-------------------------------------
s 30  |  15.702  15.505  8.841  8.008
i 33  |  18.937  17.512  9.324  8.889
z 66  |  42.264  37.863 15.569 14.158
e 100 |  65.513  56.832 22.099 17.438
  300 | 181.178 134.128 32.36  21.924

Performance of LUQuick.decompose [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01   0.1   0.99 
---------------------------------
s 30  |  4.635  3.152 1.377 0.664
i 33  |  4.989  4.257 1.315 0.844
z 66  | 10.5    8.077 1.622 0.647
e 100 | 15.092 11.311 2.141 0.458
  300 | 42.293 24.468 2.732 0.279

Speedup of dense over sparse
      | density
      | 0.0010 0.01  0.1    0.99  
----------------------------------
s 30  | 3.388  4.919  6.421 12.066
i 33  | 3.796  4.114  7.09  10.532
z 66  | 4.025  4.688  9.6   21.886
e 100 | 4.341  5.025 10.324 38.071
  300 | 4.284  5.482 11.844 78.715
Run took a total of Time=207.526 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of LUQuick.solve [Mflops/sec]
type=dense
      | density
      | 0.0010  0.01    0.1    0.99  
-------------------------------------
s 30  |  77.868  76.473 30.938 12.804
i 33  |  88.397  86.286 32.596 13.265
z 66  | 200.525 193.055 26.704 15.917
e 100 | 315.2   292.3   26.566 17.068
  300 | 838.431 397.797 18.536 15.907

Performance of LUQuick.solve [Mflops/sec]
type=sparse
      | density
      | 0.0010  0.01   0.1   0.99 
----------------------------------
s 30  |  16.704 16.471 3.681 1.349
i 33  |  18.365 18.141 3.518 1.354
z 66  |  37.499 36.153 2.334 1.364
e 100 |  56.859 54.296 2.185 1.375
  300 | 169.086 33.579 1.521 1.351

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 4.662   4.643  8.404  9.492
i 33  | 4.813   4.756  9.266  9.794
z 66  | 5.347   5.34  11.443 11.665
e 100 | 5.544   5.383 12.156 12.416
  300 | 4.959  11.847 12.189 11.773
Run took a total of Time=238.383 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of SOR [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 18.375 18.597 18.528 18.66 
i 33  | 18.537 18.575 18.372 18.407
z 66  | 17.574 17.672 17.691 17.526
e 100 | 17.23  17.032 16.358 17.239
  300 | 14.786 15     14.992 15.051

Performance of SOR [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 1.833  1.821 1.596 1.783
i 33  | 1.823  1.776 1.595 1.842
z 66  | 1.713  1.701 1.456 1.786
e 100 | 1.687  1.656 1.478 1.602
  300 | 1.646  1.525 1.43  1.5  

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  | 10.022 10.213 11.608 10.463
i 33  | 10.17  10.458 11.521  9.994
z 66  | 10.259 10.392 12.154  9.814
e 100 | 10.212 10.285 11.068 10.758
  300 |  8.981  9.838 10.48  10.034
Run took a total of Time=158.007 secs. End of run.

@x....x....x....x....x....
@x....x....x....x....x....*
Performance of Correlation [Mflops/sec]
type=dense
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  |  8.828  6.926  4.014  6.762
i 33  |  9.918  7.498  4.473  6.923
z 66  | 15.391  9.958  7.727 10.371
e 100 | 20.08  12.249 10.495 13.467
  300 | 21.247 17.642 17.489 17.255

Performance of Correlation [Mflops/sec]
type=sparse
      | density
      | 0.0010 0.01  0.1   0.99 
--------------------------------
s 30  | 1.277  1.223 1.086 1.217
i 33  | 1.254  1.178 1.1   1.217
z 66  | 1.394  1.393 1.251 1.389
e 100 | 1.487  1.474 1.433 1.47 
  300 | 1.349  1.473 1.404 1.507

Speedup of dense over sparse
      | density
      | 0.0010 0.01   0.1    0.99  
-----------------------------------
s 30  |  6.913  5.663  3.694  5.557
i 33  |  7.91   6.364  4.065  5.688
z 66  | 11.038  7.148  6.178  7.466
e 100 | 13.499  8.311  7.322  9.16 
  300 | 15.75  11.977 12.457 11.449
Run took a total of Time=202.475 secs. End of run.

Program execution took a total of 27.962118 minutes.
Good bye.
